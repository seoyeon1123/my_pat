generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  phone     String?    @unique
  email     String    @unique
  username  String?    @unique
  password  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  pet       Pet[]     // User와 여러 Pet 간의 1:N 관계
  poset     Post[]
  comment   Comment[]
}

model Pet {
  id          Int      @id @default(autoincrement())
  name        String   // 반려동물 이름
  type        String   // 반려동물 종류 (예: 개, 고양이)
  age         String   // 반려동물 나이
  category    String
  breed       String?  // 품종 (선택 사항)
  gender      String?  // 성별 (선택 사항)
  neutered    String?  // 중성화 여부 (선택 사항)
  otherBreed  String?  // 기타 품종 (선택 사항)
  traits      String[]
  reason      String? 
  imageUrl    String
  createdAt   DateTime @default(now()) // 생성일
  updatedAt   DateTime @updatedAt // 수정일
  userId      Int      // 외래키, User와 연결될 id
  user        User     @relation(fields: [userId], references: [id]) // 관계 설정
  post        Post[]   // Pet과 여러 Post 간의 1:N 관계
}

model Verification {
  id              Int      @id @default(autoincrement())
  email           String
  code            String
  createdAt       DateTime @default(now())
  expiresAt       DateTime
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String   // 게시글 제목
  content   String   // 게시글 내용
  createdAt DateTime @default(now()) // 생성일
  updatedAt DateTime @updatedAt // 수정일
  userId    Int      // 작성자 ID (User 모델과 관계)
  user      User     @relation(fields: [userId], references: [id]) 
  petId     Int?    
  pet       Pet?     @relation(fields: [petId], references: [id])
  petName String?
  comments  Comment[] // 댓글과의 1:N 관계
  imageUrl  String? 
  isFor     String  
}


model Comment {
  id        Int      @id @default(autoincrement())
  content   String   // 댓글 내용
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])

  parentId  Int?     // 부모 댓글 ID (대댓글의 경우에만 존재)
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id]) // 부모 댓글과 연결
  replies   Comment[] @relation("CommentReplies") // 부모 댓글에 대한 대댓글 목록
}
